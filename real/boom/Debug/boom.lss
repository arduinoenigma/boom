
AVRASM ver. 2.2.6  C:\projects\boom\real\boom\main.asm Mon Dec 26 21:39:11 2016

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.1.130\avrasm\inc\m328pdef.inc'
C:\projects\boom\real\boom\main.asm(15): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.1.130\avrasm\inc\m328Pdef.inc'
C:\projects\boom\real\boom\main.asm(16): Including file 'C:\projects\boom\real\boom\macros.inc'
C:\projects\boom\real\boom\main.asm(506): Including file 'C:\projects\boom\real\boom\touch.asm'
C:\projects\boom\real\boom\main.asm(507): Including file 'C:\projects\boom\real\boom\tft.asm'
C:\projects\boom\real\boom\main.asm(508): Including file 'C:\projects\boom\real\boom\vector.asm'
C:\projects\boom\real\boom\main.asm(509): Including file 'C:\projects\boom\real\boom\util.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.1.130\avrasm\inc\m328pdef.inc'
C:\projects\boom\real\boom\main.asm(15): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.1.130\avrasm\inc\m328Pdef.inc'
C:\projects\boom\real\boom\main.asm(16): Including file 'C:\projects\boom\real\boom\macros.inc'
C:\projects\boom\real\boom\main.asm(506): Including file 'C:\projects\boom\real\boom\touch.asm'
C:\projects\boom\real\boom\main.asm(507): Including file 'C:\projects\boom\real\boom\tft.asm'
C:\projects\boom\real\boom\main.asm(508): Including file 'C:\projects\boom\real\boom\vector.asm'
C:\projects\boom\real\boom\main.asm(509): Including file 'C:\projects\boom\real\boom\util.asm'
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; boom.asm
                                 ;
                                 ; Tank battle game for the Arduino.
                                 ;
                                 ; Dec 20, 2016 - Jim Shortz (farx1024@outlook.com)
                                 ;
                                 ; 2017 Hackaday 1KB challenge entry
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 .equ	DEBUG = 0
                                 .equ    SMOOTH_TERRAIN = 1  ; 30 extra bytes
                                 .equ    FLASH_TANK = 0      ; 24 extra bytes
                                 
                                 .include "m328Pdef.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 .include "macros.inc"
                                 
                                 .macro dbgcall
                                     .if DEBUG
                                     call	@0
                                     .endif
                                 .endm
                                 
                                 .macro  dbgchar
                                     .if DEBUG
                                         push    r16
                                         ldi     r16, @0
                                         rcall   txser
                                         pop     r16
                                     .endif
                                 .endm
                                 
                                 ; Load address in data space into Y register
                                 .macro loadyd
                                     ldi	yh, high(@0)
                                     ldi yl, low(@0)
                                 .endm
                                 
                                 ; Load address in data space into Z register
                                 .macro loadzd
                                     ldi	zh, high(@0)
                                     ldi zl, low(@0)
                                 .endm
                                 
                                 ; Load address in program space into Z register
                                 .macro loadzp 
                                     ldi	zh, high(@0<<1)
                                     ldi zl, low(@0<<1)
                                 .endm
                                 
                                 ; Define rectangle initializer
                                 .macro  defvect
                                     .db @0, @1
                                 .endmacro
                                 
                                 ; Define rectangle initializer
                                 .macro  defrect
                                     .db @0, @1, @2, @3
                                 .endmacro
                                 
                                 ; Colors
                                 .equ    CURSOR_COLOR =      0xffff
                                 .equ    BUTTON_COLOR =      0xffff
                                 .equ    PLAYER_1_COLOR =    0x001f
                                 .equ    PLAYER_2_COLOR =    0xf800
                                 .equ    SKY_COLOR =         0x0000
                                 .equ    EARTH_COLOR =       0x07e0
                                 
                                 ; Simulation constants
                                 .equ	SCALE =			6		; Scaling factor (in bits)
                                 .equ	FRATE =			4		; Frames per second (in bits)
                                 .equ	MAX_SCORE =		3		; Number of points you play to
                                 
                                 ; Graphics sizes
                                 .equ	SCREEN_WIDTH =	320
                                 .equ	SCREEN_HEIGHT =	240
                                 .equ	TANK_WIDTH =	30
                                 .equ	TANK_HEIGHT =	7
                                 .equ	TURR_WIDTH =	10
                                 .equ	TURR_HEIGHT =	7
                                 .equ	BUTTON_WIDTH =	32
                                 .equ	BUTTON_HEIGHT = TANK_HEIGHT + TURR_HEIGHT + 4
                                 .equ	CURSOR_WIDTH =	10
                                 .equ	CURSOR_HEIGHT =	CURSOR_WIDTH
                                 .equ	TALLY_WIDTH	 =	6
                                 .equ	TALLY_HEIGHT =	16
                                 .equ    TERRAIN_WIDTH = 64
                                 .equ    AVG_WINDOW =    16
                                 
                                 .if SMOOTH_TERRAIN
                                 .equ    PLAYER_1_X   =  8
                                 .else
                                 .endif
                                 .equ    PLAYER_2_X   =  192+PLAYER_1_X
                                 
                                 ; Vector structure
                                 .equ    VECT_X_L    =   0
                                 .equ    VECT_X_H    =   1
                                 .equ    VECT_Y_L    =   2
                                 .equ    VECT_Y_H    =   3
                                 .equ    VECTOR_SIZE =   4
                                 
                                 ; Rectangle structure
                                 .equ	RECT_LEFT_L =	0
                                 .equ	RECT_LEFT_H =	1
                                 .equ	RECT_TOP_L =	2
                                 .equ	RECT_TOP_H =	3
                                 .equ	RECT_WIDTH_L =	4
                                 .equ	RECT_WIDTH_H =	5
                                 .equ	RECT_HEIGHT_L = 6
                                 .equ	RECT_HEIGHT_H = 7
                                 .equ	RECT_SIZE	=	8
                                 
                                     .dseg
                                     .org 0x200
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; Global data
                                 ; Everything in this section is 1) global and 2) needs its value 
                                 ; preserved from turn to turn.
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                     .def    rseed=r21               ; Random number generator seed
                                     .def    player=r7               ; Current player
                                 
000200                           terrain:    .byte   SCREEN_WIDTH    ; Height of terrain for each X 
000340                                       .byte   TERRAIN_WIDTH   ; Padding
                                 
                                 .org	0x400
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; Player data section
                                 ; Everthing here is either 1) player-specific, or 2) has its value
                                 ; reset on every turn.  Even though variables in category #2 are global
                                 ; we store them in the per-player section so we don't have to keep
                                 ; changing zl and yl to point at the global section.
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 player1:
                                 
                                 ; Initialized data. These are copied from player_init to here on every turn
000400                           firing_pos: .byte   VECTOR_SIZE
000404                           cursor:     .byte   VECTOR_SIZE     ; Current position of aiming cursor
000408                           button:     .byte   RECT_SIZE
000410                           turr:       .byte   RECT_SIZE
000418                           tank:       .byte   RECT_SIZE
000420                           tally1:     .byte   RECT_SIZE
000428                           tally2:     .byte   RECT_SIZE
000430                           origin:     .byte   VECTOR_SIZE     ; 0,0
000434                           acc:        .byte   VECTOR_SIZE     ; Gravity acceleration vector
                                 
                                 ; Uninitialized data.
000438                           vel:        .byte   VECTOR_SIZE     ; Velocity of ball
00043c                           pos:        .byte   VECTOR_SIZE     ; Position of ball (physical)
000440                           scn:        .byte   VECTOR_SIZE     ; Position of ball (screen)
000444                           touch:      .byte   VECTOR_SIZE     ; last position of touch screen
000448                           touch_z:    .byte   2
00044a                           score:      .byte   1
                                 
                                 .org    0x500
                                 player2:
                                 ; This section contains copies of all data from player1.
                                 .org    0x600
                                 
                                     .cseg
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; Startup code
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 start:
                                     ; No interrupts please    
000000 94f8                          cli
                                 
                                     ; Set up stack pointer
000001 e0d8
000002 efcf                          loadyd RAMEND
000003 bfcd                          out SPL, yl
000004 bfde                          out	SPH, yh
                                 
                                     ; Initialize random seed
000005 e051                          ldi     rseed, 1
                                 
                                     ; Initialize hardware
                                     dbgcall	txinit
000006 d11b                          rcall	tft_init
                                 
                                 new_game:
                                     ; Reset scores and player
000007 e002                          ldi     r16, 2          ; Actually, number of rects to draw
000008 e4ca                          ldi     yl, low(score)
000009 e0d4                          ldi     yh, high(player1)
00000a 8308                          st      y, r16
00000b e0d5                          ldi     yh, high(player2)
00000c 8308                          st      y, r16
00000d 2e7d                          mov     player, yh         ; Storage location for current player
00000e d051                          rcall   gen_terrain
                                 
                                 ready:
00000f d08c                          rcall   draw_terrain
                                 
                                     ; Switch players
000010 e0c1                          ldi     yl, 1
000011 267c                          eor     player, yl
000012 2dd7                          mov     yh, player
                                         
                                     ; Draw the fire button
000013 e0c8                          ldi     yl, low(button)
000014 efaf                          ldi     r26, low(BUTTON_COLOR)
000015 efbf                          ldi     r27, high(BUTTON_COLOR)
000016 d130                          rcall   draw_rect
                                 
                                     ; Draw players
000017 e0d4                          ldi     yh, high(player1)
000018 d099                          rcall   draw_player
000019 95d3                          inc     yh
00001a d097                          rcall   draw_player
00001b 2dd7                          mov     yh, player
                                 
                                 aim:
                                     ; Draw cursor
00001c e0c4                          ldi     yl, low(cursor)
00001d efaf                          ldi		r26, low(CURSOR_COLOR)
00001e efbf                          ldi		r27, high(CURSOR_COLOR)
00001f d13e                          rcall	draw_cursor
                                 
                                 aim1:
                                     ; Wait for touch input
000020 d1d8                          rcall   rand
000021 e4c4                          ldi     yl, low(touch)
000022 d0a7                          rcall	touch_read
000023 f7e1                          brne	aim1
                                 
                                     ; Screen pressed - erase old cursor
000024 e0c4                          ldi     yl, low(cursor)
000025 e0a0                          ldi		r26, low(SKY_COLOR)
000026 e0b0                          ldi		r27, high(SKY_COLOR)
000027 d136                          rcall	draw_cursor
                                 
                                     ; Was the fire button clicked?
000028 2ffd                          mov     zh, yh
000029 e4e4                          ldi     zl, low(touch)
00002a e0c8                          ldi     yl, low(button)
00002b d18e                          rcall	hit_test
00002c f422                          brpl	fire
                                 
                                     ; Button not pressed - move cursor
00002d e0c4                          ldi     yl, low(cursor)
00002e e4e4                          ldi     zl, low(touch)
00002f d180                          rcall   copy_vec
000030 cfeb                          rjmp	aim
                                 
                                 fire:
                                     ; Erase fire button
000031 e0c8                          ldi     yl, low(button)
000032 d112                          rcall	erase_rect
000033 d07e                          rcall   draw_player
                                 
                                     ; vel := cursor
000034 e0e4                          ldi     zl, low(cursor)
000035 e3c8                          ldi     yl, low(vel)
000036 d179                          rcall   copy_vec
                                 
                                     ; vel -= fpos
000037 e3c8                          ldi     yl, low(vel)
000038 e0e0                          ldi     zl, low(firing_pos)
000039 d15c                          rcall   subtract_vec
                                 
                                     ; pos = fpos*SCALE
00003a e3cc                          ldi     yl, low(pos)
00003b e0e0                          ldi     zl, low(firing_pos)
00003c d163                          rcall   scale_vec
                                 
                                     dbgcall	print_all		
                                 
                                 fire1:
                                     ; vel += acc
00003d e3e4                          ldi     zl, low(acc)
00003e e3c8                          ldi     yl, low(vel)
00003f d14c                          rcall   add_vec
                                 
                                     ; pos += vel
000040 d14b                          rcall   add_vec
                                 
                                     ; scn = descale(pos)
000041 d166                          rcall   descale_vec
                                     dbgcall	print_all
                                 
                                     ; Ideally we would check overall bounds here, but the ball
                                     ; doesn't fly fast enough for weirdness to happen.
                                 
                                     ; Get terrain[x]
000042 e4c0                          ldi     yl, low(scn)
000043 91a9                          ld      xl, y+
000044 91b9                          ld      xh, y+
000045 60b2                          ori     xh, high(terrain)
000046 900c                          ld      r0, x
                                 
                                     ; Did we hit terrain?
000047 9149                          ld      r20, y+
000048 1540                          cp      r20, r0
000049 f228                          brlo    ready
                                 
                                     ; Did we hit a player?
00004a e0d4                          ldi     yh, high(player1)
00004b d16c                          rcall   hit_player
00004c f442                          brpl    hit
00004d 95d3                          inc     yh
00004e d169                          rcall   hit_player
00004f f42a                          brpl    hit
000050 2dd7                          mov     yh, player
                                 
                                     ; Draw the ball
000051 e4c0                          ldi     yl, low(scn)
000052 d134                          rcall	draw_point
000053 d182                          rcall	delay50
000054 cfe8                          rjmp	fire1
                                 
                                 hit:
                                 .if FLASH_TANK
                                 .endif
                                 
                                     ; Increase score of other player
000055 e001                          ldi     r16, 1
000056 27d0                          eor     yh, r16
000057 e4ca                          ldi     yl, low(score)
000058 8108                          ld      r16, y
000059 9503                          inc     r16
00005a 8308                          st      y, r16
                                 
                                     ; Is the game over?
00005b 3005                          cpi     r16, 2+MAX_SCORE
00005c f409                          brne    hit2
00005d cfa9                          rjmp    new_game
                                 
                                 hit2:
                                     ; Reset terrain and continue game
00005e d001                          rcall   gen_terrain
00005f cfaf                          rjmp    ready
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; gen_terrain
                                 ;
                                 ; Randomly generates terrain
                                 ;
                                 ; Outputs:
                                 ;   terrain - Array of random heights
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 gen_terrain:
                                     ; Generate plateaus of TERRAIN_WIDTH - enough to fill the screen
000060 e016                          ldi     r17, SCREEN_WIDTH/TERRAIN_WIDTH+1
000061 e0d2
000062 e0c0                          loadyd  terrain
                                 
                                 gen_terrain1:
                                     ; Generate a random height for this plateau
000063 d195                          rcall   rand
000064 772f                          andi    r18, 127        ; Limit to 127
000065 e400                          ldi     r16, TERRAIN_WIDTH
                                 
                                 gen_terrain2:
000066 9329                          st      y+, r18
000067 950a                          dec     r16
000068 f7e9                          brne    gen_terrain2
                                 
000069 951a                          dec     r17
00006a f7c1                          brne    gen_terrain1
                                 
                                 .if SMOOTH_TERRAIN
00006b e120                          ldi     r18, AVG_WINDOW
                                 avg_terrain1:
00006c e0d2
00006d e0c0                          loadyd  terrain
                                 ;    add     yl, r18
                                 avg_terrain2:
00006e 8008                          ld      r0, y
00006f 8019                          ldd     r1, y+1
000070 0c01                          add     r0, r1
000071 9406                          lsr     r0
000072 9209                          st      y+, r0
000073 34c0                          cpi     yl, low(terrain+SCREEN_WIDTH)
000074 f7c9                          brne    avg_terrain2
000075 30d3                          cpi     yh, high(terrain+SCREEN_WIDTH)
000076 f7b9                          brne    avg_terrain2
000077 952a                          dec     r18
000078 f799                          brne    avg_terrain1
                                 .endif
                                 
                                     ; Position players on terrain
000079 e0d4                          ldi     yh, high(player1)
00007a e0a8                          ldi     xl, PLAYER_1_X
00007b d003                          rcall   setup_player
                                 
00007c e0d5                          ldi     yh, high(player2)
00007d eca8                          ldi     xl, PLAYER_2_X
00007e c000                          rjmp    setup_player
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; setup_player
                                 ;
                                 ; Positions player's rectangles on the newly generated terrain
                                 ;
                                 ; Inputs:
                                 ;   yh - player
                                 ;   xl - Starting X position
                                 ;
                                 ; Outputs:
                                 ;   firing_pos, button, tank, turr adjusted to correct positions
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 setup_player:
                                     ; Copy data from ROM
00007f 27cc                          clr     yl
000080 e0f1
000081 e7e8                          loadzp  player_init
000082 e10c                          ldi     r16, (player_init_end-player_init)*2
000083 d144                          rcall   copyp
                                 
                                     ; Move tallies
000084 e1e8                          ldi     zl, low(tank)
000085 2ffd                          mov     zh, yh
000086 83a0                          st      z, xl
000087 e2c0                          ldi     yl, low(tally1)
000088 e002                          ldi     r16, 2
000089 d128                          rcall   offset_rects
                                 
                                     ; Randomly add 64 to starting position.
00008a d16e                          rcall   rand
00008b 7420                          andi    r18, 64
00008c 27bb                          clr     xh
00008d 0fa2                          add     xl, r18
00008e 1fbb                          adc     xh, xh
                                 
                                     ; Store starting position in tank.x
00008f e1c8                          ldi     yl, low(tank)
000090 93a9                          st      y+, xl
000091 93b9                          st      y+, xh
                                 
                                     ; tank.y := terrain[x] + 2
000092 60b2                          ori     xh, high(terrain)
000093 918c                          ld      r24, x
000094 9602                          adiw    r24, 2
000095 9389                          st      y+, r24
                                 
                                     ; Offset remaining rects by (tank.x, tank.y)
000096 2ffd                          mov     zh, yh
000097 e1e8                          ldi     zl, low(tank)
000098 e0c0                          ldi     yl, low(firing_pos)
000099 e003                          ldi     r16, 3      ; firing_pos, button, turr
00009a d117                          rcall   offset_rects
                                     
                                     dbgcall print_player
00009b 9508                          ret
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; draw_terrain
                                 ;
                                 ; Draws terrain and sky on the screen.
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 draw_terrain:
                                     ; Set vertical orienation and home cursor
00009c d0a4                          rcall   tft_vert
00009d e3c0                          ldi     yl, low(origin)
00009e d0df                          rcall   move_xy
00009f e262                          ldi		r22, TFT_WRD
0000a0 d064                          rcall	send_command
                                 
0000a1 e0d2
0000a2 e0c0                          loadyd  terrain
                                 
                                 draw_terrain1:
                                     ; Draw terrain for this column
0000a3 8108                          ld      r16, y
0000a4 eea0                          ldi     r26, low(EARTH_COLOR)
0000a5 e0b7                          ldi     r27, high(EARTH_COLOR)
0000a6 d0d1                          rcall   draw_line1
                                 
                                     ; Fill remainder of column with sky
0000a7 ef00                          ldi     r16, SCREEN_HEIGHT
0000a8 9119                          ld      r17, y+
0000a9 1b01                          sub     r16, r17
0000aa e0a0                          ldi     r26, low(SKY_COLOR)
0000ab e0b0                          ldi     r27, high(SKY_COLOR)
0000ac d0cb                          rcall   draw_line1
                                 
                                     ; More columns left?
0000ad 34c0                          cpi     yl, low(terrain+SCREEN_WIDTH)
0000ae f7a1                          brne    draw_terrain1
0000af 30d3                          cpi     yh, high(terrain+SCREEN_WIDTH)
0000b0 f791                          brne    draw_terrain1
                                 
0000b1 9508                          ret
                                     
                                 .if FLASH_TANK
                                 .endif
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; draw_player
                                 ;
                                 ; Draws the turret and tank of the given player.
                                 ;
                                 ; Inputs:
                                 ;   yh - high byte of player structure
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 draw_player:
0000b2 e4ca                          ldi     yl, low(score)
0000b3 8138                          ld      r19, y          ; score + 2 (tank, turr)
                                 
0000b4 e1af                          ldi     r26, low(PLAYER_1_COLOR)
0000b5 e0b0                          ldi     r27, high(PLAYER_1_COLOR)
                                 
0000b6 30d4                          cpi     yh, high(player1)
0000b7 f011                          breq    draw_player1
                                 
                                     ; Override color if player2
0000b8 e0a0                          ldi     r26, low(PLAYER_2_COLOR)
0000b9 efb8                          ldi     r27, high(PLAYER_2_COLOR)
                                 
                                 draw_player1:
0000ba e1c0                          ldi     yl, low(turr)
0000bb c09b                          rjmp    draw_rects
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; Variable initializers
                                 ;
                                 ; Everything in this block is copied to data space during new_game
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 player_init:   
0000bc 0e0f                          defvect TANK_WIDTH/2, TURR_HEIGHT+TANK_HEIGHT       ; firing position
0000bd c0a0                          defvect SCREEN_WIDTH/2, 192                         ; cursor
0000be feff
0000bf 1220                          defrect -1, -2, BUTTON_WIDTH, BUTTON_HEIGHT         ; button
0000c0 070a
0000c1 070a                          defrect (TANK_WIDTH-TURR_WIDTH)/2, TANK_HEIGHT, TURR_WIDTH, TURR_HEIGHT ; turret
0000c2 0000
0000c3 071e                          defrect 0, 0, TANK_WIDTH, TANK_HEIGHT               ; tank
0000c4 e000
0000c5 1006                          defrect 0, SCREEN_HEIGHT-TALLY_HEIGHT, TALLY_WIDTH, TALLY_HEIGHT   ; tally1
                                     defrect 0+TALLY_WIDTH*2, SCREEN_HEIGHT-TALLY_HEIGHT, \
0000c6 e00c
0000c7 1006                                  TALLY_WIDTH, TALLY_HEIGHT                   ; tally2
0000c8 0000                          defvect 0, 0                                        ; origin
0000c9 fe00                          defvect 0, -2                                       ; acc (0, -9.8*SCALE/FRATE/FRATE)
                                 
                                 player_init_end:
                                 
                                 ; Include utility modules    
                                 .include    "touch.asm"
                                 
                                 ; touch.asm
                                 ;
                                 ; Touch screen interface routines.
                                 ;
                                 ; Based on Adafruit touch screen library - https://github.com/adafruit/Touch-Screen-Library
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 ; Touch screen pins
                                 .equ	XPLUS	= PORTC3
                                 .equ	XMINUS	= PORTC1
                                 .equ	YPLUS	= PORTC2
                                 .equ	YMINUS	= PORTC0
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; touch_read
                                 ;
                                 ; Reads the touch screen input
                                 ;
                                 ; Inputs:
                                 ;   Y - pointer to cursor position vector
                                 ;
                                 ; Outputs:
                                 ;   Z flag -	Set if pressed
                                 ;   Y = Y + 3
                                 ;
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 touch_read:
                                     ; This routine uses a table of parameters to read all 3 axes (x, y, z)
0000ca e0f1
0000cb eeec                          loadzp	touch_tbl
0000cc e003                          ldi		r16, touch_tbl_size
                                 
                                 touch_read1:
                                     ; Push DDR, PORT, ADMUX values from table to hardware
0000cd 9005                          lpm		r0, Z+
0000ce b807                          out		DDRC, r0
0000cf 9005                          lpm		r0, Z+
0000d0 b808                          out		PORTC, r0
0000d1 9005                          lpm		r0, Z+
0000d2 9200 007c                     sts		ADMUX, r0
                                 
                                     ; Read two samples - abort if they don't match
0000d4 d015                          rcall	adc_read
0000d5 2da2                          mov		r26, r2
0000d6 2db3                          mov		r27, r3
0000d7 d012                          rcall	adc_read
0000d8 15a2                          cp		r26, r2
0000d9 05b3                          cpc		r27, r3
0000da f471                          brne	touch_read9
                                 
                                     ; Subtract offset from table
0000db 9005                          lpm		r0, Z+
0000dc 2411                          clr		r1
0000dd 1820                          sub		r2, r0
0000de 0831                          sbc		r3, r1
                                 
                                     ; Multiply by the numerator
0000df 9125                          lpm		r18, Z+
0000e0 d0ff                          rcall	mul168u
                                 
                                     ; Divide by the denominator
0000e1 9125                          lpm		r18, Z+
0000e2 d102                          rcall	div168u
0000e3 9209                          st		y+, r0
0000e4 9219                          st		y+, r1
                                 
                                     ; More axes remaining?
0000e5 950a                          dec		r16
0000e6 f731                          brne	touch_read1
                                 
                                     ; Set Z flag if z' < 256 (screen was pressed)
0000e7 900a                          ld      r0, -y  ; touch_z + 1
0000e8 2000                          tst     r0
                                 
                                 touch_read9:
0000e9 9508                          ret
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; adc_read
                                 ;
                                 ; Reads the on-chip A to D converter
                                 ;
                                 ; Inputs -
                                 ;   ADMUX   - Set to appropriate channel.
                                 ;   
                                 ; Outputs -
                                 ;   r2, r3  - Output value (0-1023)
                                 ;
                                 ; Affected -
                                 ;   r17
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 adc_read:
                                     ; Start A/D conversion
0000ea ec17                          ldi		r17, (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADSC)
0000eb 9310 007a                     sts		ADCSRA, r17
                                 
                                    ; Wait for conversion to complete
                                 adc_read1:
0000ed 9110 007a                     lds		r17, ADCSRA
0000ef fd16                          sbrc	r17, ADSC
0000f0 cffc                          rjmp	adc_read1
                                 
                                     ; Read value from ADC
0000f1 9020 0078                     lds		r2, ADCL
0000f3 9030 0079                     lds		r3, ADCH
0000f5 9508                          ret
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; Data tables
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 .equ	TOUCH_TBL_SIZE	= 3
                                 
                                 touch_tbl:
                                     ; Format - DDR, PORTC, ADMUX, offset, numerator, denominator
                                     
                                     ; The X and Y values are carefully chosen such that 
                                     ; (adc_value - offset) * numerator / denominator will transform
                                     ; into the correct screen coordinates.
                                     
                                     ; These numbers are a bit different from those in the Adafruit library
                                     ; because 1) we have X and Y flipped for landscape mode and 2)
                                     ; Adafruit immediately subtracts the numbers from 1023 before mapping 
                                     ; them.  Also, we simplify the fractions to avoid 16-bit overflow.
                                     
                                     ; x' = (x-83)*320/(940-120) = (x-83)*16/41
0000f6 0405                          .db (1<<YPLUS) | (1<<YMINUS), (1<<YPLUS), XMINUS | (1 << REFS0), \
0000f7 5341
0000f8 2910                              83, 16, 41
                                 
                                     ; y' = (y-123)*240(940-140) = (y-123)*6/19
0000f9 080a                          .db (1<<XPLUS) | (1<<XMINUS), (1<<XPLUS), YPLUS | (1 << REFS0), \
0000fa 7b42
0000fb 1306                              123, 6, 19
                                 
                                     ; z' = (z-182)*1/3
                                     ; These numbers transform z values < 950 to z' < 256.  This
                                     ; allows a super-cheap pressure threshold test.
0000fc 0109                          .db (1<<XPLUS) | (1<<YMINUS), 1<<YMINUS, YPLUS | (1 << REFS0), \
0000fd b642
0000fe 0301                              182, 1, 3
                                 .include    "tft.asm"
                                 
                                 ; tft.asm
                                 ;
                                 ; TFT color display interface routines
                                 ;
                                 ; Based on Seed Studio TFT library - https://github.com/Seeed-Studio/TFT_Touch_Shield_V1
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 ; TFT Pins
                                 ; Port B
                                 .equ	TFT_CS	=	2
                                 .equ	TFT_RS	=	3
                                 .equ	TFT_WR	=	4
                                 .equ	TFT_RD	=	5
                                 
                                 ; TFT Registers
                                 .equ	TFT_ENTRY =		0x03
                                 .equ	TFT_SETY =		0x20	; Intentionally flipped to use in landscape mode
                                 .equ	TFT_SETX =		0x21
                                 .equ	TFT_WRD	 =		0x22
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; send_cd
                                 ;
                                 ; Sends a command and word of data to the TFT module
                                 ;
                                 ; Inputs:
                                 ;	r22			-	Command to send
                                 ;	r24, r25	-   Word to send (low, high)
                                 ;
                                 ; Affects: r18
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 send_cd:
0000ff 938f                          push	r24
000100 939f                          push	r25
000101 d003                          rcall	send_command
000102 917f                          pop		r23
000103 916f                          pop		r22
000104 c003                          rjmp	send_data
                                     
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; send_command
                                 ;
                                 ; Sends a command to the TFT module
                                 ;
                                 ; Inputs:
                                 ;	r22		- Command to send
                                 ;
                                 ; Affects: r18, r23
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 send_command:
000105 e220                          ldi		r18, (1<<TFT_RD)
000106 2777                          clr		r23
000107 c001                          rjmp	send_core
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; send_data
                                 ;
                                 ; Sends a word of data to the TFT module
                                 ;
                                 ; Inputs:
                                 ;	r22, r23	- Word to send (low, high)
                                 ;
                                 ; Affects: r18
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 send_data:
000108 e228                          ldi	r18, (1<<TFT_RS) | (1<<TFT_RD)
                                 
                                 send_core:
000109 936f                          push	r22
00010a b925                          out		PORTB, r18
                                     
                                     ; Send high byte
00010b 2f67                          mov		r22, r23
00010c d007                          rcall	send_byte
                                 
                                     ; Strobe WR line
00010d 9a2c                          sbi PORTB, TFT_WR
00010e 982c                          cbi PORTB, TFT_WR
                                 
                                     ; Send low byte
00010f 916f                          pop		r22
000110 d003                          rcall	send_byte
                                 
                                     ; WR_HIGH;
000111 9a2c                          sbi PORTB, TFT_WR
                                 
                                     ; CS_HIGH;
000112 9a2a                          sbi PORTB, TFT_CS
000113 9508                          ret
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; send_byte
                                 ;
                                 ; Sends a byte to the TFT module.  Internal method, to be used
                                 ; by send_command and send_data only.
                                 ;
                                 ; Inputs:
                                 ;	r22			-	 Byte to send
                                 ;
                                 ; Affects: r18, r23
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 send_byte:
                                     ; Shift r22 left 2 bits
000114 2777                          clr		r23
000115 0f66                          lsl		r22
000116 1f77                          rol		r23
000117 0f66                          lsl		r22
000118 1f77                          rol		r23
                                 
                                     ; PORTD |= lower 6 bits (r22)
000119 b12b                          in		r18, PORTD
00011a 7023                          andi	r18, 0b00000011
00011b 2b26                          or		r18, r22
00011c b92b                          out		PORTD, r18
                                 
                                     ; PORTB |= upper 2 bits (r23)
00011d b125                          in		r18, PORTB
00011e 7f2c                          andi	r18, 0b11111100
00011f 2b27                          or		r18, r23
000120 b925                          out		PORTB, r18
                                 
000121 9508                          ret
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; tft_init
                                 ;
                                 ; Initializes the TFT display module
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 tft_init:
                                     ; Set up pins
000122 e36f                          ldi		r22, (1<<TFT_CS) | (1<<TFT_RD) | (1<< TFT_WR) | (1 << TFT_RS) | 0x3
000123 b964                          out		DDRB, r22
000124 ef6c                          ldi		r22, 0b11111100
000125 b96a                          out		DDRD, r22
000126 e36c                          ldi		r22, (1<<TFT_CS) | (1<<TFT_RD) | (1<< TFT_WR) | (1 << TFT_RS)
000127 b965                          out		PORTB, r22
000128 2766                          clr		r22
000129 b96b                          out		PORTD, r22
                                     
                                     ; Loop through the initialization commands stored in table
00012a e0f2
00012b e6ea                          loadzp	tftinit_cmds
                                 tftinit1:
00012c 9165                          lpm		r22, z+			; Command
00012d 3060                          cpi		r22, 0x00		; End of table?
00012e f029                          breq	tftinit9
                                 
                                     ; Ordinary command
00012f dfd5                          rcall	send_command
000130 9175                          lpm		r23, z+
000131 9165                          lpm		r22, z+
000132 dfd5                          rcall	send_data
000133 cff8                          rjmp	tftinit1
                                 
                                     ; End of table reached
                                 tftinit9:
000134 9508                          ret
                                 
                                     ; Commands to initialize the TFT display
                                     ; Format: cmd, hibyte, lobyte
                                 tftinit_cmds:
                                     .db \
000135 0101                          0x1, 0x1, 0x0, \
000136 6000                          0x60, 0xA7, 0x0, \
000137 00a7
000138 0061                          0x61, 0x0, 0x1, \
000139 1001                          0x10, 0x14, 0xE0, \
00013a e014
00013b 0107                          0x7, 0x1, 0x33, \
00013c 0033                          0x0	; End
                                 
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; tft_horiz
                                 ;
                                 ; Changes the TFT module to auto-increment in the horizontal direction.
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 tft_horiz:
00013d e063                          ldi		r22, TFT_ENTRY
00013e e388                          ldi		r24, 0x38
00013f e590                          ldi		r25, 0x50
000140 cfbe                          rjmp	send_cd
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; tft_vert
                                 ;
                                 ; Changes the TFT module to auto-increment in the vertical direction.
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 tft_vert:
000141 e063                          ldi		r22, TFT_ENTRY
000142 e380                          ldi		r24, 0x30
000143 e590                          ldi		r25, 0x50
000144 cfba                          rjmp	send_cd
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; erase_rect
                                 ;
                                 ; Draw a black rectangle
                                 ;
                                 ; Inputs:
                                 ;	Y - Pointer to rectangle structure
                                 ;
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 erase_rect:
000145 e0a0                          ldi     r26, low(SKY_COLOR)
000146 e0b0                          ldi     r27, high(SKY_COLOR)
                                     ; Fall through
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; draw_rect
                                 ;
                                 ; Draw a filled rectangle
                                 ;
                                 ; Inputs:
                                 ;	Y -         Pointer to rectangle structure
                                 ;   r26, r27 -  Color
                                 ;
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 draw_rect:
                                     ; r2 <- height remaining
000147 802e                          ldd		r2, y+RECT_HEIGHT_L
000148 dff4                          rcall	tft_horiz
                                 
                                 draw_rect1:
                                     ; Position cursor, X=left
000149 e261                          ldi		r22, TFT_SETX
00014a 8188                          ld		r24, y
00014b 8199                          ldd		r25, y+RECT_LEFT_H
00014c dfb2                          rcall	send_cd
                                 
                                     ; Y = top+height remaining-1
00014d e260                          ldi		r22, TFT_SETY
00014e 818a                          ldd		r24, y+RECT_TOP_L
00014f 0d82                          add		r24, r2
000150 2799                          clr     r25
000151 dfad                          rcall	send_cd
                                     
                                     ; Draw RECT_WIDTH pixels
000152 810c                          ldd     r16, y+RECT_WIDTH_L
000153 d022                          rcall   draw_line
                                 
                                     ; Decrement height remaining
000154 942a                          dec		r2
000155 f79a                          brpl	draw_rect1
                                 
000156 9508                          ret
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; draw_rects
                                 ;
                                 ; Draws a series of rectanges
                                 ;
                                 ; Inputs:
                                 ;	Y -	        Pointer to array of rects
                                 ;	r19	-	    Number of rects to draw
                                 ;   r26, r27 -  Color
                                 ;
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 draw_rects:
000157 933f                          push	r19
000158 dfee                          rcall	draw_rect
000159 913f                          pop		r19
00015a 9628                          adiw	y, RECT_SIZE
00015b 953a                          dec		r19
00015c f7d1                          brne	draw_rects
00015d 9508                          ret
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; draw_cursor
                                 ;
                                 ; Draws the cursor
                                 ;
                                 ; Inputs:
                                 ;   Y -         Pointer to position vector
                                 ;	r26,r27     Color
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 draw_cursor:
00015e e261                          ldi		r22, TFT_SETX
00015f 8188                          ldd		r24, y+0
000160 8199                          ldd		r25, y+1
000161 df9d                          rcall	send_cd
000162 e260                          ldi		r22, TFT_SETY
000163 818a                          ldd		r24, y+2
000164 819b                          ldd		r25, y+3
000165 9705                          sbiw    r24, low(CURSOR_HEIGHT/2)
000166 df98                          rcall	send_cd
                                 
000167 dfd9                          rcall	tft_vert
000168 e00a                          ldi     r16, CURSOR_HEIGHT
000169 d00c                          rcall   draw_line
                                 
00016a e261                          ldi		r22, TFT_SETX
00016b 8188                          ldd		r24, y+0		
00016c 8199                          ldd		r25, y+1
00016d 9705                          sbiw    r24, low(CURSOR_WIDTH/2)
00016e df90                          rcall	send_cd
                                 
00016f e260                          ldi		r22, TFT_SETY
000170 818a                          ldd		r24, y+2
000171 819b                          ldd		r25, y+3
000172 df8c                          rcall	send_cd
                                 
000173 dfc9                          rcall	tft_horiz
000174 e00a                          ldi     r16, CURSOR_WIDTH
000175 c000                          rjmp    draw_line
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; draw_line
                                 ;
                                 ; Draws a run of pixels.
                                 ;
                                 ; Preconditions:
                                 ;   Call tft_vert or tft_horiz to set direction.
                                 ;   Call move_xy to set origin
                                 ;   Send TFT_WRD command (draw_line1 only)
                                 ;
                                 ; Inputs:
                                 ;   r16 -       Length of line
                                 ;   r26, r27 -  Color
                                 ;
                                 ; Affects: r18, r22, r23
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 draw_line:
000176 e262                          ldi		r22, TFT_WRD
000177 df8d                          rcall	send_command
                                 draw_line1:
000178 2f6a                          mov     r22, r26
000179 2f7b                          mov     r23, r27
00017a df8d                          rcall	send_data
00017b 950a                          dec		r16
00017c f7d9                          brne	draw_line1
00017d 9508                          ret
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; move_xy
                                 ;
                                 ; Sets screen position to vector.
                                 ;
                                 ; Inputs:
                                 ;	Y - pointer to vector in screen coordinates
                                 ;
                                 ; Affects: Many
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 move_xy:
00017e e261                          ldi		r22, TFT_SETX
00017f 8188                          ld		r24, y
000180 8199                          ldd		r25, y+1
000181 df7d                          rcall	send_cd
                                 
000182 e260                          ldi		r22, TFT_SETY
000183 818a                          ldd		r24, y+2
000184 819b                          ldd		r25, y+3
000185 df79                          rcall	send_cd
000186 9508                          ret
                                            
                                 draw_point:
000187 dff6                          rcall   move_xy        
000188 e262                          ldi		r22, TFT_WRD
000189 ef8f                          ldi		r24, low(CURSOR_COLOR)
00018a ef9f                          ldi		r25, high(CURSOR_COLOR)
00018b cf73                          rjmp	send_cd
                                 
                                 .if DEBUG
                                 .include    "vector.asm"
                                 
                                 ; vector.asm
                                 ;
                                 ; Vector and rectangle manipulation routines.
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; add_vec
                                 ;
                                 ; Inputs:
                                 ;   Y - Destination vector
                                 ;   Z - Vector to add
                                 ;
                                 ; Outputs:
                                 ;   Y = Y+4
                                 ;   Z = Z+4
                                 ;
                                 ; Affected: r0-r3
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 add_vec:
00018c d000                          rcall   add_int
                                 
                                 add_int:
00018d 8008                          ld		r0, y
00018e 8019                          ldd		r1, y+1
00018f 9021                          ld		r2, z+
000190 9031                          ld		r3, z+
000191 0c02                          add		r0, r2
000192 1c13                          adc		r1, r3
000193 9209                          st		y+, r0
000194 9219                          st		y+, r1
000195 9508                          ret
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; subtract_vec
                                 ;
                                 ; Inputs:
                                 ;   Y - Destination vector
                                 ;   Z - Vector to subtract
                                 ;
                                 ; Outputs:
                                 ;   Y = Y+4
                                 ;   Z = Z+4
                                 ;
                                 ; Affected: r0-r3
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 subtract_vec:
000196 d000                          rcall   subtract_int
                                 
                                 subtract_int:
000197 8008                          ld		r0, y
000198 8019                          ldd		r1, y+1
000199 9021                          ld		r2, z+
00019a 9031                          ld		r3, z+
00019b 1802                          sub		r0, r2
00019c 0813                          sbc		r1, r3
00019d 9209                          st		y+, r0
00019e 9219                          st		y+, r1
00019f 9508                          ret
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; scale_vec
                                 ;
                                 ; Multiplies vector by SCALE
                                 ;
                                 ; Inputs:
                                 ;   Y - Destination vector
                                 ;   Z - Source vector
                                 ;
                                 ; Outputs:
                                 ;   Y = Y+4
                                 ;   Z = Z+4
                                 ;
                                 ; Affected: r0-r4
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 scale_vec:
0001a0 d000                          rcall   scale_int
                                 
                                 scale_int:
0001a1 9021                          ld      r2, z+
0001a2 9031                          ld      r3, z+
0001a3 e420                          ldi     r18, 1<<SCALE
0001a4 d03b                          rcall   mul168u
0001a5 9209                          st      y+, r0
0001a6 9219                          st      y+, r1        
0001a7 9508                          ret
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; descale_vec
                                 ;
                                 ; Divides vector by SCALE
                                 ;
                                 ; Inputs:
                                 ;   Y - Destination vector
                                 ;   Z - Source vector
                                 ;
                                 ; Outputs:
                                 ;   Y = Y+4
                                 ;   Z = Z+4
                                 ;
                                 ; Affected: r0-r4, r16
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 descale_vec:
0001a8 d000                          rcall   descale_int
                                 
                                 descale_int:
0001a9 9001                          ld      r0, z+
0001aa 9011                          ld      r1, z+
0001ab e420                          ldi     r18, 1<<SCALE
0001ac d038                          rcall   div168u
0001ad 9209                          st      y+, r0
0001ae 9219                          st      y+, r1        
0001af 9508                          ret
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; copy_vec
                                 ;
                                 ; Copies a vector
                                 ;
                                 ; Inputs:
                                 ;   Y - Destination vector
                                 ;   Z - Source vector
                                 ;
                                 ; Affects - r16
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 copy_vec:
0001b0 e004                          ldi     r16, VECTOR_SIZE
0001b1 c01f                          rjmp    copy
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; offset_rects
                                 ;
                                 ; Adjusts the x,y position of a number of rectangles by a given vector.
                                 ;
                                 ; Inputs:
                                 ;   r16 -   Number of rects
                                 ;   Y -     Rects to adjust
                                 ;   Z -     Pointer to vector to offset by
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 offset_rects:
0001b2 dfd9                          rcall   add_vec
0001b3 9624                          adiw    yl, VECTOR_SIZE
0001b4 9734                          sbiw    zl, VECTOR_SIZE
0001b5 950a                          dec     r16
0001b6 f7d9                          brne    offset_rects
0001b7 9508                          ret
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; hit_player
                                 ;
                                 ;   Determines if the tank was hit
                                 ;
                                 ; Inputs:
                                 ;   yh -    High word of target player structure
                                 ;	Z -     Pointer to point coordinates
                                 ;
                                 ; Outputs:
                                 ;   N   -   tank was NOT hit
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 hit_player:
0001b8 e4e0                          ldi     zl, low(scn)
0001b9 e1c8                          ldi     yl, low(tank)
                                     ; Fall through
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; hit_test
                                 ;
                                 ; Determines if a point is within a rectangle
                                 ;
                                 ; Inputs:
                                 ;	Y - Pointer to rectangle structure
                                 ;	Z - Pointer to point coordinates
                                 ;
                                 ; Outputs:
                                 ;	N - Point is NOT in rectangle
                                 ;   Y - Y+4
                                 ;   Z - Z+4
                                 ;
                                 ; Affects: r0, r1, r2, r3
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 hit_test:
                                     ; Test X coordinates
0001ba d001                          rcall	hit_test1
0001bb f05a                          brmi	hit_test9
                                 
                                     ; Fall through to Y
                                 hit_test1:
0001bc 9001                          ld		r0, z+
0001bd 9011                          ld		r1, z+
0001be 9029                          ld		r2, y+
0001bf 9039                          ld		r3, y+
0001c0 1802                          sub		r0, r2
0001c1 0813                          sbc		r1, r3
0001c2 f022                          brmi	hit_test9
0001c3 802a                          ldd		r2, y+2 
0001c4 803b                          ldd		r3, y+3
0001c5 1420                          cp		r2, r0
0001c6 0431                          cpc		r3, r1
                                 
                                 hit_test9:
0001c7 9508                          ret
                                     
                                 .include    "util.asm"
                                 
                                 ; util.asm
                                 ;
                                 ; Generic utility routines
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; copyp
                                 ;
                                 ; Copies program memory to data memory.  Copies each byte of
                                 ; program memory to a word of data memory and performs sign extension.
                                 ;
                                 ; Inputs:
                                 ;	Z -		Source address in program memory
                                 ;	Y -		Destination address in data memory
                                 ;	r16 -	Number of source bytes to copy
                                 ;
                                 ; Outputs:
                                 ;	Y -		Y+r16
                                 ;	Z -		Z+r16
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 copyp:
0001c8 9005                          lpm		r0, z+     
0001c9 2411                          clr     r1
0001ca fc07                          sbrc    r0, 7       ; Sign extend
0001cb 9410                          com     r1
0001cc 9209                          st		y+, r0
0001cd 9219                          st      y+, r1
0001ce 950a                          dec		r16
0001cf f7c1                          brne	copyp
0001d0 9508                          ret
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; copy
                                 ;
                                 ; Copy data memory to data memory.
                                 ;
                                 ; Inputs:
                                 ;	r16 -	Count
                                 ;	Z -		Source (data space)
                                 ;	Y -		Destination (data space)
                                 ;
                                 ; Affects: r0
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 copy:
0001d1 9001                          ld		r0, z+
0001d2 9209                          st		y+, r0
0001d3 950a                          dec		r16
0001d4 f7e1                          brne	copy
0001d5 9508                          ret
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; delay50
                                 ;
                                 ; Delays approximately 50ms
                                 ;
                                 ; Affects: r18, r19, r20
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 delay50:
                                 ; Generated by delay loop calculator
                                 ; at http://www.bretmulvey.com/avrdelay.html
                                 ;
                                 ; Delay 800 000 cycles
                                 ; 50ms at 16 MHz
                                 
0001d6 e025                          ldi  r18, 5
0001d7 e03f                          ldi  r19, 15
0001d8 ef42                          ldi  r20, 242
0001d9 954a                      L1: dec  r20
0001da f7f1                          brne L1
0001db 953a                          dec  r19
0001dc f7e1                          brne L1
0001dd 952a                          dec  r18
0001de f7d1                          brne L1
0001df 9508                          ret
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; mul168u
                                 ;
                                 ; Multiply a 16-bit unsigned by an 8-bit unsigned
                                 ;
                                 ; Inputs:
                                 ;	r2, r3	- 16-bit number
                                 ;	r18		- 8-bit number
                                 ; Outputs:
                                 ;	r0, r1	- 16-bit result
                                 ; Affects:
                                 ;	r5
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 mul168u:
0001e0 9e32                          mul		r3, r18
0001e1 2c50                          mov		r5, r0
0001e2 9e22                          mul		r2, r18
0001e3 0c15                          add		r1, r5
0001e4 9508                          ret
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; div168u/div16u
                                 ;
                                 ; Divides 16-bit unsigned number by an 8 or 16-bit divisor.
                                 ; Based on AVR200 div16u code from Atmel
                                 ;
                                 ; Inputs:
                                 ;	r0,r1 -		Dividend
                                 ;	r18,r19 -	Divisor (omit r19 for div168u)
                                 ;
                                 ; Outputs:
                                 ;	r0,r1 -		Quotient
                                 ;	r14,r15 -	Remainder			
                                 ;
                                 ; Affected:
                                 ;	r20
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 div168u:
0001e5 2733                          clr		r19		; We always take an 8 bit divisor
                                 div16u:	
0001e6 24ee                          clr		r14		; clear remainder Low byte
0001e7 18ff                          sub		r15,r15	; clear remainder High byte and carry
0001e8 e141                          ldi		r20,17	; init loop counter
                                 d16u_1:	
0001e9 1c00                          rol		r0		; shift left dividend
0001ea 1c11                          rol		r1
0001eb 954a                          dec		r20		; decrement counter
0001ec f409                          brne	d16u_2	; if done
0001ed 9508                          ret				;    return
                                 d16u_2:	
0001ee 1cee                          rol		r14		; shift dividend into remainder
0001ef 1cff                          rol		r15
0001f0 1ae2                          sub		r14,r18	; remainder = remainder - divisor
0001f1 0af3                          sbc		r15,r19	;
0001f2 f420                          brcc	d16u_3	; if result negative
0001f3 0ee2                          add		r14,r18	;    restore remainder
0001f4 1ef3                          adc		r15,r19
0001f5 9488                          clc				; clear carry to be shifted into result
0001f6 cff2                          rjmp	d16u_1		;else
                                 d16u_3:	
0001f7 9408                          sec			;    set carry to be shifted into result
0001f8 cff0                          rjmp	d16u_1	
                                 
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 ; rand
                                 ;
                                 ; Generate a pseudo-random number
                                 ;
                                 ; Outputs:
                                 ;   r18     - Number
                                 ;   rseed   - Updated seed 
                                 ;
                                 ; Adapted from http://atariage.com/forums/topic/159268-random-numbers/?p=1958751
                                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                 rand:
0001f9 9556                          lsr     rseed
0001fa f410                          brcc    rand1
0001fb eb24                          ldi     r18, 0xb4
0001fc 2752                          eor     rseed, r18
                                 rand1:
0001fd 2f25                          mov     r18, rseed
0001fe 9508                          ret
                                 
                                 .if	DEBUG
                                 .endif
                                 
                                 theend:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   2 y  :  57 z  :  22 r0 :  36 r1 :  22 r2 :  17 r3 :  14 r4 :   0 
r5 :   2 r6 :   0 r7 :   5 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   4 r15:   5 r16:  27 r17:   8 r18:  30 r19:   9 r20:   6 
r21:   4 r22:  32 r23:   9 r24:  18 r25:  12 r26:  17 r27:  18 r28:  33 
r29:  24 r30:  13 r31:   6 
Registers used: 27 out of 35 (77.1%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   3 add   :   6 adiw  :   3 and   :   0 
andi  :   4 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   2 brcs  :   0 break :   0 breq  :   2 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 brlt  :   0 brmi  :   2 
brne  :  20 brpl  :   4 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   1 cbr   :   0 
clc   :   1 clh   :   0 cli   :   1 cln   :   0 clr   :  10 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   1 cp    :   3 cpc   :   2 
cpi   :   7 cpse  :   0 dec   :  14 eor   :   3 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   2 inc   :   3 jmp   :   0 
ld    :  28 ldd   :  20 ldi   : 116 lds   :   3 lpm   :  10 lsl   :   2 
lsr   :   2 mov   :  14 movw  :   0 mul   :   2 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   2 ori   :   2 out   :  11 pop   :   4 
push  :   4 rcall :  70 ret   :  23 reti  :   0 rjmp  :  17 rol   :   6 
ror   :   0 sbc   :   4 sbci  :   0 sbi   :   3 sbic  :   0 sbis  :   0 
sbiw  :   3 sbr   :   0 sbrc  :   2 sbrs  :   0 sec   :   1 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :  22 std   :   0 sts   :   2 
sub   :   6 subi  :   0 swap  :   0 tst   :   1 wdr   :   0 
Instructions used: 49 out of 113 (43.4%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003fe    960     62   1022   32768   3.1%
[.dseg] 0x000100 0x000600      0    459    459    2048  22.4%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
